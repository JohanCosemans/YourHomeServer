package net.yourhome.server.base.rules.scenes.actions.notifications;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import net.yourhome.common.net.messagestructures.general.ClientNotificationMessage;
import net.yourhome.common.net.messagestructures.http.HttpCommand;
import net.yourhome.server.base.BuildConfig;
import net.yourhome.server.base.DatabaseConnector;
import net.yourhome.server.http.HttpCommandController;

public class GoogleCloudMessagingService {
	public static final String GOOGLE_CLOUD_MESSAGING = "https://android.googleapis.com/gcm/send";
	
	private Map<String, Device> registeredDevices = new HashMap<String, Device>();
	private static Logger log = Logger.getLogger(GoogleCloudMessagingService.class);
	private static volatile GoogleCloudMessagingService instance;
	private static Object lock = new Object();

	private GoogleCloudMessagingService() {

		// Read registration ID's from database
		String dbSelect = "SELECT * from main.Notification_GCM";
		ResultSet allRegistrationIdsResult = null;
		try {
			allRegistrationIdsResult = DatabaseConnector.getInstance().executeSelect(dbSelect);
			while (allRegistrationIdsResult.next()) {
				Device newDevice = new Device(allRegistrationIdsResult);
				this.registeredDevices.put(newDevice.getRegistrationId(), newDevice);
			}
		} catch (SQLException e) {
			log.error("Exception occured: ", e);
		} finally {
			try {
				if (allRegistrationIdsResult != null) {
					allRegistrationIdsResult.getStatement().close();
					allRegistrationIdsResult.close();
				}
			} catch (SQLException e) {
				log.error("Exception occured: ", e);
			}
		}

	}

	public static GoogleCloudMessagingService getInstance() {
		GoogleCloudMessagingService r = instance;
		if (r == null) {
			synchronized (lock) { // while we were waiting for the lock, another
				r = instance; // thread may have instantiated the object
				if (r == null) {
					r = new GoogleCloudMessagingService();
					instance = r;
				}
			}
		}
		return instance;
	}

	public void registerClient(Device device) throws SQLException {
		if (this.registeredDevices.get(device.getRegistrationId()) == null) {
			this.registeredDevices.put(device.getRegistrationId(), device);
			String dbSaveQuery = "INSERT into main.Notification_GCM ('registration_id', 'name', 'width', 'height') VALUES ('" + device.getRegistrationId() + "', '" + device.getName() + "', '"+device.getWidth()+"','"+device.getHeight()+"')";
			DatabaseConnector.getInstance().executeQuery(dbSaveQuery);

			log.info("Successfully registered device " + device.toString());
		}
	}

	public void sendMessage(ClientNotificationMessage message) {
		sendMessage(message.getMessageMap());
	}

	private void sendMessage(Map<String, String> messageVariables) {

		HttpCommandController controller = HttpCommandController.getInstance();
		HttpCommand command = new HttpCommand();

		command.setHttpMethod("POST");
		command.setMessageType("application/json");
		command.setMessageBody(getMessageBody(messageVariables).toString());
		command.setUrl(GOOGLE_CLOUD_MESSAGING);
		command.addHeader("Authorization", "key=" + BuildConfig.GCM_API_CODE);

		try {
			controller.sendHttpCommand(command);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private JSONObject getMessageBody(Map<String, String> dataVariables) {
		JSONArray registrationIDs = new JSONArray();
		JSONObject resultObj = new JSONObject();
		JSONObject dataObj = new JSONObject();

		try {

			// Parse data fields
			for (Entry<String, String> mapEntry : dataVariables.entrySet()) {
				try {
					dataObj.put(mapEntry.getKey(), mapEntry.getValue());
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
			resultObj.put("data", dataObj);

			// Parse registration strings
			for (String registrationId : registeredDevices.keySet()) {
				registrationIDs.put(registrationId);
			}

			resultObj.put("registration_ids", registrationIDs);

		} catch (JSONException e) {
			e.printStackTrace();
		}

		return resultObj;
	}

	public class Device {

		private String registrationId;
		private String name;
		private int width;
		private int height;

		public Device(String registrationId, String name, int width, int height) {
			this.registrationId = registrationId;
			this.name = name;
			this.width = width;
			this.height = height;
		}

		public Device(ResultSet result) throws SQLException {
			this.registrationId = result.getString("registration_id");
			this.name = result.getString("name");
		}

		public String toString() {
			return name+", "+width+"*"+height;
		}
		
		
		/**
		 * @return the width
		 */
		public int getWidth() {
			return width;
		}

		/**
		 * @param width the width to set
		 */
		public void setWidth(int width) {
			this.width = width;
		}

		/**
		 * @return the height
		 */
		public int getHeight() {
			return height;
		}

		/**
		 * @param height the height to set
		 */
		public void setHeight(int height) {
			this.height = height;
		}

		/**
		 * @return the registrationId
		 */
		public String getRegistrationId() {
			return registrationId;
		}

		/**
		 * @param registrationId
		 *            the registrationId to set
		 */
		public void setRegistrationId(String registrationId) {
			this.registrationId = registrationId;
		}

		/**
		 * @return the name
		 */
		public String getName() {
			return name;
		}

		/**
		 * @param name
		 *            the name to set
		 */
		public void setName(String name) {
			this.name = name;
		}

	}
}
